<html>

<head>
<meta http-equiv="Content-Language" content="ja">
<meta http-equiv="Content-Type" content="text/html; charset=shift_jis">
<link rel="stylesheet" type="text/css" href="../style.css">
<title>プログラムの高速化と最適化</title>
<base>
</head>

<body>

<div id="header">
	<div class="title">
		１５．プログラムの高速化と最適化</div>
	<div class="sub">
		TTSneoマニュアル</div>
	<div class="navi">
		<a target="_parent" href="../index.html">マニュアル</a> &gt; <a target="_parent" href="index.htm">ソフト作り編</a> &gt;</div>
	<div class="date">
		<!--webbot bot="Timestamp" s-type="EDITED" s-format="%Y/%m/%d" startspan -->2006/08/07<!--webbot bot="Timestamp" endspan i-checksum="12816" -->更新</div>
</div>
<h2>プログラムを早くするためのポイント</h2>
<table border="0" cellpadding="10" cellspacing="0" width="100%">
	<tr>
		<td><img border="0" src="../img/ttschar10.png" width="119" height="121"></td>
		<td>
		TTSneoは、初心者でも気軽に使えるように作られていますが、気軽に使える分、内部でいろいろな処理をするために、処理速度が速いプログラムが作りづらくなってしまいます。<p>
		ここでは、処理速度を速くするためやプログラムを見やすくするテクニックを紹介します。</td>
	</tr>
</table>
<p>　</p>
<h2>高速化にほとんど関係ないもの</h2>
<blockquote>
	<p>次の項目は、実行する前に処理をしてしまうため、処理速度に影響ありません。<br>
	TTSneoデザイナ上では、微妙に変化することもありますが、実行可能ファイルにした場合やダブルクリックして実行した場合などは全く関係ありません。</p>
	<p>コメント・注釈（’）<br>
	タブ・スペース<br>
	空行</p>
	<p>　</p>
</blockquote>
<h2>正しい文法で書きましょう</h2>
<blockquote>
	<p>TTSneoは、初心者でも使えるように、多少文法が違っても、正しい動作をするように作られています。<br>
	しかし、正しい文法で記述することで、処理が速くなることもあります。</p>
	<p>特に、文字に指定する場合、&quot;「 」&quot;を指定しないと、関数なのか変数なのかを探す処理が増えるため処理が遅くなります。文字だけの場合は、必ず&quot;「 
	」&quot;で囲みましょう。</p>
	<p><b>改善前</b></p>
	<p class="example">内容は、入力（メッセージをどうぞ）<br>
	もし　内容は、こんにちは　なら　内容を表示</p>
	<p><b>改善後</b></p>
	<p class="example">内容は、入力（<b>「</b>メッセージをどうぞ<b>」</b>）<br>
	もし　内容は、<b>「</b>こんにちは<b>」</b>　なら　内容を表示</p>
</blockquote>
<p>　</p>
<h2>同じ関数を使うときは変数に入れておく</h2>
<blockquote>
	<p>同じ結果になる関数を何度も使うと、関数の処理を行う分無駄に時間がかかります。<br>
	同じ結果になると分かっている場合、関数の結果を直接使わずに変数に入れておけば、無駄に関数が処理されることがなくなり、処理速度が早くなります。</p>
	<p><b>改善前</b></p>
	<p class="example">ファイル名は、「Abc.Txt」<br>
	もし　［小文字（拡張子だけ（ファイル名））は、「txt」］　［小文字（拡張子だけ（ファイル名））は、「tts」］　なら<br>
	　　・・・・<br>
	もし終わり</p>
	<p><b>改善後</b></p>
	<p class="example">ファイル名は、「Abc.txt」<br>
	<b>拡張子は、小文字（拡張子だけ（ファイル名））</b><br>
	もし　［拡張子は、「txt」］　［拡張子は、「tts」］　なら<br>
	　　・・・・<br>
	もし終わり</p>
	<p>このように、同じ結果を表す関数の結果は、変数に入れておいて、その変数を使うようにするとプログラムが見やすくなり、高速化します。</p>
	<p>
	これと同様に、オブジェクトの設定項目や、ファイルやフォルダなどディスクの操作やインターネットに接続する機能などは、処理に時間がかかるので、何度も使う場合は、変数に保存しておきましょう。</p>
	<p>　</p>
</blockquote>
<h2>「分岐」命令が使えないか</h2>
<blockquote>
	<p>同じ変数やオブジェクトの設定項目の判断を行うときは、「分岐」命令が使えないか検討してみてください。<br>
	「分岐」命令を使ったほうが多少、処理速度が向上します。</p>
	<p class="example">ファイル名は、「Abc.txt」<br>
	小文字（拡張子だけ（ファイル名））について分岐<br>
	「txt」、「tts」の場合<br>
	　　・・・・<br>
	「jpg」、「bmp」の場合<br>
	　　・・・・<br>
	他の場合<br>
	　　・・・・<br>
	もし終わり</p>
	<p class="steps"><b>▼参考</b><br>
	<a href="../basic/switch.htm">一つの内容について分岐する　『分岐』</a></p>
</blockquote>
<p>　</p>
<h2>できるだけ配列を使う</h2>
<blockquote>
	<p>「配列検索」・「配列取り出し」関数を使うと、「もし」や「繰り返せ」命令を使わずに複数の項目を検索することができます。</p>
	<p>また、TTSneoの配列は、文字として扱われているので、「小文字」・「置換」関数などを利用して検索しやすい形に前処理することもできます。<br>
	大量のデータを扱いたい場合は、配列の機能が応用できないか検討してみてください。</p>
	<p class="example">リスト１の一覧を、「Yahoo!、Google、MSN」に変えろ<br>
	配列（１，０）は、「Yahoo!、http://www.yahoo.co.jp/」<br>
	配列（２，０）は、「Google、http://www.google.co.jp/」<br>
	配列（３，０）は、「MSN、http://www.msn.co.jp/」<br>
	<br>
	番号は、<b><font color="#FF00FF">配列検索</font></b>（配列、リスト１の内容、1）<br>
	アドレスは、配列（番号、２）</p>
	<p class="steps"><b>▼参考<br>
	</b>機能編<br>
	　<a href="../application/arrange2.htm">配列を使ったいろいろな機能</a></p>
</blockquote>
<p>　</p>
<h2>配列処理の高速化</h2>
<blockquote>
	<p>TTSneoの配列は、C言語などとは違い、通常の文字列として保存されています。<br>
	そのため、配列のデータ量が増えると、一回処理するだけでもかなりの時間がかかってしまいます。</p>
	<p>このような場合は、「配列処理」「配列判断」関数など活用できないか検討してください。<br>
	これらの関数は、処理に時間がかかる配列処理を、「繰り返せ」命令を使った場合と違い、TTSneo内部で処理してくれるため、大幅に処理速度を速めることができます。</p>
</blockquote>
<p>　</p>
<h2>オブジェクトの設定項目</h2>
<blockquote>
	<p>
	テキストの内容やチェックの状況など、オブジェクトの設定項目の情報を取り出すときは、オブジェクトの存在や設定項目を確認したりするため、変数と比べ処理に時間がかかります。</p>
	<p>一度のみの場合は、ほとんど変わりませんが、何度も利用する場合は、一度変数に結果を入れておくと、処理向上が見込めます。</p>
	<p><b>改善前</b></p>
	<p class="example">５０回、数にカウントして繰り返せ<br>
	　　文章テキスト１の内容を、文章テキスト１の内容＆改行＆数に変えろ<br>
	繰り返し終わり</p>
	<p><b>改善後</b></p>
	<p class="example">内容は、文章テキスト１の内容<br>
	５０回、数にカウントして繰り返せ<br>
	　　<b>内容は、内容＆改行＆数</b><br>
	繰り返し終わり<br>
	文章テキスト１の内容を、内容に変えろ</p>
</blockquote>
<p>　</p>
<h2>「それ」・「これ」を活用する</h2>
<blockquote>
	<p>オブジェクト名を指定する命令は、オブジェクトを検索するのに時間がかかります。<br>
	そのため、オブジェクトを検索する必要のない「それ」「これ」オブジェクトなどを使ってください。</p>
	<p class="steps">▼参考<br>
&nbsp;&nbsp; <a href="objsetting.htm">プログラムでオブジェクトの設定を変える・調べる</a></p>
	<p>「〜について」命令を使うと、「それ」よりも様々な部分で利用することができます。</p>
	<p class="example">ウィンドウ１を表示<br>
	ボタン１を作れ<br>
	ボタン１<b><font color="#FF00FF">について</font></b><br>
	　　この位置を３０，３０に変えろ<br>
	　　この大きさを１００，１００に変えろ<br>
	　　この名前を「ウィンドウ」に変えろ<br>
	<font color="#FF00FF"><b>これについて終わり</b></font></p>
</blockquote>
<p>　</p>
<h2>オブジェクトの描画を抑制する</h2>
<blockquote>
	<p>
	リストやツリービューなどの一覧を表示するオブジェクトの場合、一つの項目を追加するたびに、オブジェクトの文字や画像が描画するので、大量のデータを追加するときにちらついたり遅くなったりします。</p>
	<p>このような場合、オブジェクトの「表示」設定項目をオフにすることでその間だけ描画をさせないようにすることができます。これにより高速化が見込めます。</p>
	<p class="example"><b>リスト１の表示をオフに変えろ</b><br>
	１００回、数にカウントして繰り返せ<br>
	　　乱数（数）をリスト１へ追加<br>
	繰り返し終わり<br>
	<b>リスト１の表示をオンに変えろ</b></p>
	<p>また、配列に追加する項目をすべて登録しておき、一覧を表示するオブジェクトに用意されている、「一覧」設定項目で一度に追加すると効率よく追加できます。<br>
	この設定項目を利用した場合は、表示をオフにする必要はありません。</p>
</blockquote>
<p>　</p>
<h2>ウィンドウの描画を抑制する</h2>
<blockquote>
	<p>
	ウィンドウにある「描画ロック」設定項目を使うと、ウィンドウ全体の描画を一時的にさせないようにすることができます。ゲームなどのように絵を利用するプログラムの場合、命令が実行されるたびに再描画されるので、この「描画ロック」を使って一度に描画させることで、処理速度の向上が見込めます。</p>
</blockquote>
<p>　</p>
<h2>APIよりもTTSneo標準の命令を</h2>
<blockquote>
	<p>
	VBなどの言語では、VB標準の命令を使うよりもAPIを使ったほうが一般的に速いことがあるとされていますが、TTSneoの場合、APIを呼び出す手続きなどで時間がかかるので、逆に遅くなることがあります。<br>
	TTSneo内部プログラムでは、高速化が見込める機能はAPIを利用している場合がほとんどなので、APIを利用したことだけでは高速化は見込めません。</p>
	<p>
	すべての場合にいえることではありませんが、TTSneo標準で提供されている機能の場合、Windowsの標準のAPIを利用するよりも、TTSneo標準機能を使ってください。</p>
</blockquote>
<p>　</p>
<h2>別の方法を考えてみましょう</h2>
<blockquote>
	<p>それでも、処理が遅いと感じるときは、他にもっと良い方法がないか考えてみましょう。<br>
	作りたいプログラムによっても方法が違いますが、意外な命令や関数を使って高速化することが可能です。</p>
	<p>TTSneoの掲示板やこのマニュアル、リファレンスなどをじっくり探してみて、応用できないか検討してみてください。</p>
</blockquote>
<p>　</p>
<h2>他のプログラミング言語ができる方は</h2>
<blockquote>
	<p>Visual 
	Basicなどの市販の言語が使える方は、DLLやプラグインを経由するという方法もあります。プラグインの作り方は、別途公開しているTTS 
	SDKをご覧ください。<br>
	かなり荒い方法ですが、他のプログラミング言語の経験があれば、高速化が確実に見込めます。</p>
</blockquote>
<p>　</p>
<h2>少しでも速くしたいときは、高速版を</h2>
<blockquote>
	<p>TTSneoデザイナ上で実行すると、編集やデバッグ処理のため、処理速度が低下します。<br>
	実行可能ファイルの作成をすることで、プログラムを高速に実行することが可能です。<br>
	また、計算処理など少しでも速く処理させたい場合は、「高速版」で実行可能ファイルを作成してください。</p>
	<p>高速版でも大幅な高速化は見込めせんが、一回り処理速度が向上することがあります。</p>
</blockquote>
<p>　</p>
<h2>プログラムは段落を付けて見やすく（インデント）</h2>
<blockquote>
	<p>人の好みにもよりますが、プログラムに段落をつけることでプログラムが整理され見やすくなります。<br>
	TTSneoデザイナでは、[Tab]キーを押すことで、その行に段落をつけることができます。<br>
	複数の行を指定した場合は、すべての行に段落がつけられます。</p>
	<p>また[Shift]+[Tab]で戻すこともできます。</p>
	<p><b>改善前</b></p>
	<p class="example">手順は　処理<br>
	繰り返せ<br>
	ファイルの処理<br>
	もし　結果は、「」　なら　繰り返しから抜ける<br>
	繰り返し終わり<br>
	終わり</p>
	<p><b>改善後</b></p>
	<p class="example">手順は　処理<br>
	　　繰り返せ<br>
	　　　　ファイルの処理<br>
	　　　　もし　結果は、「」　なら　繰り返しから抜ける<br>
	　　繰り返し終わり<br>
	終わり</p>
	<p>処理速度には影響がないので、ぜひプログラムが見やすくなるように心がけてください。</p>
</blockquote>
<p>　</p>

</body>

</html>
