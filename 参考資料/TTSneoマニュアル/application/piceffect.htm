<html>

<head>
<meta http-equiv="Content-Language" content="ja">
<meta http-equiv="Content-Type" content="text/html; charset=shift_jis">
<link rel="stylesheet" type="text/css" href="../style.css">
<title>画像に効果を与える</title>
</head>

<body>

<div id="header">
	<div class="title">
		画像に効果を与える</div>
	<div class="sub">
		TTSneoマニュアル</div>
	<div class="date">
		<!--webbot bot="Timestamp" s-type="EDITED" s-format="%Y/%m/%d" startspan -->2007/03/18<!--webbot bot="Timestamp" endspan i-checksum="12507" -->更新</div>
	<div class="navi">
		<a target="_parent" href="../index.html">マニュアル</a> &gt; <a target="_parent" href="index.htm">機能編</a> &gt; <a target="contents" href="menu-img.htm">画像</a> &gt;</div>
</div>
<h2>画像をコピーする</h2>
<blockquote>
	<p>「画像コピー」命令で、ピクチャーなどに読み込んだ画像や描いた絵をコピーしたり貼り付けたりすることができます。 </p>
</blockquote>
<p class="example">ウィンドウ１を表示<br>
ピクチャー１を作れ<br>
　　その大きさを２００，２００に変えろ<br>
場所は、ピクチャー１<br>
<br>
太さは、５<br>
１５，１５から１００，１００で円<br>
５，５から１２０，１２０で四角形<br>
<br>
ピクチャー１をウィンドウ１へ画像コピー</p>
<blockquote>
	<p>上の例では、ピクチャー１に描いた絵を、ウィンドウへ画像コピーしています。<br>
	画像の切り取る位置や貼り付ける位置は、指定することもできます。 </p>
	<p class="example">ピクチャー１の５，５から５０，５０をウィンドウ１の５０，５０へ画像コピー</p>
	<p>実行すると、ピクチャー１の一部分が、ウィンドウ１の５０，５０の位置に画像コピーされます。 
	</div>
	</p>
</blockquote>
<p>　</p>
<h2>画像を拡大・縮小する</h2>
<blockquote>
	<p>「画像コピー」命令を使って画像の拡大と縮小もできます。 </p>
	<p class="example">ピクチャー１をウィンドウ１の１０，１０から５０，５０へ画像コピー<br>
	ピクチャー１をウィンドウ１の５０，１０から３００，３００へ画像コピー</p>
	<p>　</p>
</blockquote>
<h2>キャラクタの移動</h2>
<blockquote>
	<p>ここで、「画像コピー」命令を使ってキャラクタの移動をさせてみましょう。<br>
	ウィンドウで動くものが１つの場合は、イメージオブジェクトを使う方が簡単でよいのですが、ゲームのように敵やアイテムなどでたくさんのオブジェクトを使うと、処理が低下してしまうので、そのような場合、画像コピーを使うほうが快適に動作します。 
	</p>
</blockquote>
<h4>キャラクタを移動するには</h4>
<blockquote>
	<p>今回は、オブジェクトを利用しないので、変数にキャラクタの位置を保存しておきます。<br>
	複数のキャラクタを登場させる場合は、配列を使うと、「繰り返せ」命令などで簡単にプログラムすることができます。 </p>
	<p>十字キーを押したときの処理は、 </p>
	<p class="example">もし　キー状態（37）は、オン　なら　自機横は、自機横−１０<br>
	もし　キー状態（39）は、オン　なら　自機横は、自機横＋１０<br>
	もし　キー状態（40）は、オン　なら　自機縦は、自機縦＋１０<br>
	もし　キー状態（38）は、オン　なら　自機縦は、自機縦−１０</p>
</blockquote>
<h4>背景とキャラクタを合成したい</h4>
<blockquote>
	<p>「画像コピー」命令を使えば、マスクを使用した透過処理を行うことが出来ます。<br>
	マスク機能を使う場合は、画像として下のような画像を用意します。<br>
	<br>
	<b>マスク画像の作成</b><br>
	まず、元となるキャラクタを用意します。<br>
	その後、ペイントなどで背景を黒、それ以外の場所を白にしたマスク画像を作ります。<br>
	マスク画像は、一つのファイルに下のように保存しておきます。<br>
	ここでは、画像のサイズを横32、縦64とします。<br>
　</p>
	<p><img src="gr-mask.png" width="32" height="64"> </p>
	<p>次に、作成したマスク画像をピクチャー１に表示しておき、下のように命令します。<br>
	マスク処理をする場合、画像コピーにオプションを設定します。 </p>
	<p class="example">ピクチャー１の０，３２から３２，３２を固定ウィンドウ１の自機横、自機縦に&amp;HEE0086で画像コピー<br>
	ピクチャー１の０，０から３２，３２を固定ウィンドウ１の自機横、自機縦に&amp;H8800C6で画像コピー</p>
	<p>オプションに指定する数値は、Windows APIのBitBltと同じ値です。<br>
	詳しい説明は省略させていただきますが、このまま、他のプログラムでも使うことが出来きます。 </p>
	<p>自機横と自機縦には、キャラクタを表示する座標を入れておきます。</p>
</blockquote>
<h4>画像を描き終えるまで、描画を抑制する</h4>
<blockquote>
	<p>今回のように、キャラクタが１つだけの場合は、気にする必要はありませんが、<br>
	敵やアイテムなどたくさんのキャラクタを使う場合は、「画像コピー」命令が実行されるたびに、全体の画像を描きなおしているので処理に時間がかかります。</p>
	<p>そこで、「描画ロック」設定項目を使うことで、キャラクタや敵、アイテムがすべて描き終わるまで、全体を書き直さないようにすることができます。 </p>
	<p>※「描画ロック」が有効のままソフトが終わらないように、「固定ウィンドウ１を閉じる」手順にも設定を入れてください。 </p>
</blockquote>
<p class="example">固定ウィンドウ１の表示<br>
自機縦は、３００<br>
自機横は、乱数（３００）<br>
<br>
永遠に繰り返せ<br>
　　固定ウィンドウ１の描画ロックをオンに変えろ<br>
　　固定ウィンドウ１にピクチャー２を画像コピー<br>
<br>
　　ピクチャー１の０，３２から３２，３２を固定ウィンドウ１の自機横、自機縦に&amp;HEE0086で画像コピー<br>
　　ピクチャー１の０，０から３２，３２を固定ウィンドウ１の自機横、自機縦に&amp;H8800C6で画像コピー<br>
　　もし　キー状態（37）は、オン　なら　自機横は、自機横−１０<br>
　　もし　キー状態（39）は、オン　なら　自機横は、自機横＋１０<br>
　　もし　キー状態（40）は、オン　なら　自機縦は、自機縦＋１０<br>
　　もし　キー状態（38）は、オン　なら　自機縦は、自機縦−１０<br>
　　<br>
　　固定ウィンドウ１の描画ロックをオフに変えろ<br>
繰り返し終わり<br>
待機<br>
<br>
手順は　固定ウィンドウ１の表示<br>
固定ウィンドウ１を使う<br>
’&lt;固定ウィンドウ１&gt;<br>
固定ウィンドウ１の中の大きさを400，400へ変えろ<br>
　　その名前を「固定ウィンドウ１」へ変えろ<br>
　　その背景を&amp;h008000へ変えろ<br>
ピクチャー１を作れ<br>
　　その位置と大きさを150，20，32，64へ変えろ<br>
　　その絵を「test.bmp」へ変えろ<br>
　　その背景を&amp;h8000000Fへ変えろ<br>
ピクチャー２を作れ<br>
　　その位置と大きさを40，40，40，40へ変えろ<br>
　　その絵を「sky.bmp」へ変えろ<br>
　　その背景を&amp;h008000へ変えろ<br>
’&lt;/固定ウィンドウ１&gt;<br>
ピクチャー１の表示をオフに変えろ<br>
ピクチャー２の表示をオフに変えろ<br>
固定ウィンドウ１の０，０から４００，４００にピクチャー２を画像コピー<br>
ピクチャー２の大きさを４００，４００へ変えろ<br>
ピクチャー２に固定ウィンドウ１を画像コピー<br>
固定ウィンドウ１を表示<br>
終わり<br>
手順は　固定ウィンドウ１を閉じる<br>
　　固定ウィンドウ１の描画ロックをオフに変えろ<br>
　　終了<br>
終わり</p>
<blockquote>
	<p>　</p>
</blockquote>
<h2>画像に効果を与える</h2>
<blockquote>
	<p>画像に効果を与えることができます。<br>
	効果を加えることができるのは、ピクチャーオブジェクトとウィンドウです。 </p>
	<p class="format">[オブジェクト名]をぼかし<br>
	[オブジェクト名]を鮮明化<br>
	[オブジェクト名]を[明るさの度合い]でコントラスト<br>
	[オブジェクト名]をエンボス<br>
	[オブジェクト名]を[合成するファイル]と[割合]で合成<br>
	[オブジェクト名]を白黒<br>
	[オブジェクト名]を[荒さ]でモザイク<br>
	[オブジェクト名]を反転<br>
	[オブジェクト名]をセピア<br>
	[オブジェクト名]をソラリゼーション</p>
</blockquote>
<p class="example">ウィンドウ１の表示<br>
待機<br>
<br>
手順は　ウィンドウ１の表示<br>
ウィンドウ１を使う<br>
’&lt;ウィンドウ１&gt;<br>
ウィンドウ１の中の大きさを392，336へ変えろ<br>
　　その名前を「画像効果」へ変えろ<br>
　　その背景を&amp;h8000000Fへ変えろ<br>
ピクチャー１を作れ<br>
　　その位置と大きさを10，70，256，256へ変えろ<br>
　　その絵を「C:\WINDOWS\シャボン.bmp」へ変えろ<br>
　　その背景を&amp;h8000000Fへ変えろ<br>
ボタン１を作れ<br>
　　その位置と大きさを60，10，70，40へ変えろ<br>
　　その名前を「適用」へ変えろ<br>
’&lt;/ウィンドウ１&gt;<br>
ウィンドウ１を表示<br>
終わり<br>
<br>
手順は　ウィンドウ１のボタン１をクリック<br>
ピクチャー１をセピア<br>
終わり</p>
<blockquote>
	<p>　</p>
</blockquote>
<h2>透過処理を行う</h2>
<blockquote>
	<p>複数の画像を同時に合成するには、「透過処理」命令を使います。<br>
	「透過処理」命令を使うと、マスク画像を作る必要がありません。<br>
	サイズの大きい画像を合成する場合や、透明にする色を指定したいときなどに利用できます。 </p>
	<p>※「透過処理」命令は、高速処理には向きません。<br>
	　速度を要求するようなゲーム作り利用する場合は、「キャラクタの移動」で紹介したマスク画像を使った方法を利用してください。 </p>
	<p class="format">[表示先]で[背景画像]と[手前の画像]を透過処理 </p>
	<p>透明になる色は、[手前の画像]の左上の１ピクセル目の色です。 </p>
	<p>画像には、ピクチャーオブジェクトやウィンドウを指定します。<br>
	画像ファイルは指定できないので、ピクチャーオブジェクトを使って読み込む必要があります。 </p>
	<p>下の例では、２つの画像「A.bmp」と「B.bmp」を透過処理命令で一枚の画像にします。 </p>
</blockquote>
<p class="example">ウィンドウ１を使う<br>
　　その大きさを200，200に変えろ<br>
<br>
’★手前に表示される画像<br>
’キャラクタなどは、こちらに指定します<br>
ピクチャー１を作れ<br>
　　その位置を３００，３００に変えろ<br>
　　その絵を「A.bmp」に変えろ<br>
<br>
’★背景となる画像<br>
ピクチャー２を作れ<br>
　　その位置を３００，３００に変えろ<br>
　　その絵を「B.bmp」に変えろ<br>
<br>
’★合成実行<br>
ウィンドウ１でピクチャー２とピクチャー１を透過処理<br>
<br>
ウィンドウ１を表示 </p>
<h4>特定の位置に表示させる</h4>
<blockquote>
	<p>合成する画像の位置を指定することもできます。 </p>
	<p class="format">[表示先]で[背景画像]と[手前の画像]＝[横]，[縦]を透過処理 
	</div>
	</p>
</blockquote>

</body>

</html>
